#!/usr/bin/env python3
##############################################################################
# Program by: James Lambert                                                  #
# Date Updated: 20220419                                                     #
##############################################################################
# Euler Problem 2 in Python                                                  #
# Even Fibonacci numbers                                                     #
# Each new term in the Fibonacci sequence is generated by adding the         #
# previous two terms. By starting with 1 and 2, the first 10 terms will be:  #
# 1, 2, 3, 5, 8, 13, 21, 34, 55, 89, ...                                     #
# By considering the terms in the Fibonacci sequence whose values do not     #
# exceed four million, find the sum of the even-valued terms.                #
##############################################################################

def list_fibonacci_numbers(maximum):
    # creates a list of fibonacci numbers below variable 'maximum'
    # keeps track of a total by adding numbers that are even
    fib_numbers = [1, 2]   # starting fibonacci numbers
    total = 2              # starting total (accounting for the 2)
    while True:            # runs until code stops it from working
        high_num = fib_numbers[-1] + fib_numbers[-2]
        if (high_num <= maximum):
            fib_numbers.append(high_num)
            if high_num % 2 == 0:
                total += high_num
        else:
            break
    return total


result = list_fibonacci_numbers(4000000)
print(result)
